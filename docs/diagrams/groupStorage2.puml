@startuml
actor User
participant ":GroupCommand" as GroupCommand
participant ":Group" as Group
participant ":GroupNameChecker" as GroupNameChecker
participant ":GroupStorage" as GroupStorage
participant ":FileIO" as FileIO

User -> GroupCommand: enter Project Team
activate GroupCommand

GroupCommand -> Group: enterGroup("Project Team")
activate Group

Group -> Group: check if group exists in memory
activate Group
alt group does not exist in memory
    Group --> Group: false
    deactivate Group

    Group -> GroupNameChecker: doesGroupNameExist("Project Team")
    activate GroupNameChecker
    alt group file exists
        GroupNameChecker --> Group: true
        deactivate GroupNameChecker

        Group -> GroupStorage: loadGroupFromFile("Project Team")
        activate GroupStorage

        GroupStorage -> FileIO: getFileReader(filePath)
        activate FileIO
        FileIO --> GroupStorage: reader
        deactivate FileIO

        GroupStorage -> GroupStorage: loadGroupName(reader)
        activate GroupStorage
        deactivate GroupStorage

        GroupStorage -> GroupStorage: loadMembers(reader, group)
        activate GroupStorage
        deactivate GroupStorage

        GroupStorage -> GroupStorage: loadExpenses(reader, group)
        activate GroupStorage
        deactivate GroupStorage

        GroupStorage -> FileIO: reader.close()
        activate FileIO
        deactivate FileIO

        GroupStorage --> Group: loadedGroup
        deactivate GroupStorage
    else group file does not exist
        GroupNameChecker --> Group: false
        deactivate GroupNameChecker

        Group --> GroupCommand: group does not exist
        deactivate Group
    end
else group exists in memory
    Group --> Group: true
    deactivate Group

    Group --> GroupCommand: group found in memory
    deactivate Group
end

GroupCommand --> User
deactivate GroupCommand
@enduml